@page "/Transacoes/edit"

@using Microsoft.EntityFrameworkCore
@using TesteDaUmbler.Models
@using TesteDaUmbler.Data
@inject CieloService CieloService
@inject AppDbContext DbContext
@inject NavigationManager NavigationManager

<PageTitle>Transação</PageTitle>

<h1>Captura de Saldo</h1>

<h4>Transação</h4>
<hr />
@if (Transacao is null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <dl class="row">
        <dt class="col-sm-2">Valor</dt>
        <dd class="col-sm-10">@Transacao.Valor</dd>
        <dt class="col-sm-2">Id do Pagamento</dt>
        <dd class="col-sm-10">@Transacao.PaymentId</dd>
        <dt class="col-sm-2">Estado Da Transação</dt>
        <dd class="col-sm-10">@Transacao.EstadoDaTransacao</dd>
        <dt class="col-sm-2">Número do Cartão</dt>
        <dd class="col-sm-10">@Transacao.Cartao.NumeroDoCartao</dd>
        <dt class="col-sm-2">Nome no Cartão</dt>
        <dd class="col-sm-10">@Transacao.Cartao.NomeNoCartao</dd>
    </dl>

    <EditForm method="post" Model="Transacao" OnValidSubmit="CapturaTransacao" FormName="edit" Enhance>
        <button type="submit" class="btn btn-primary" disabled="@(Transacao is null)">Capturar</button> |
        <a href="@($"/transacoes")">Voltar pra lista</a>
    </EditForm>
}

@if (!string.IsNullOrEmpty(mensagemErro))
{
    <div class="alert alert-danger">@mensagemErro</div>
}

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Transacao? Transacao { get; set; }

    private string? mensagemErro;

    protected override async Task OnInitializedAsync()
    {
        Transacao ??= await DbContext.Transacoes.Include(t => t.Cartao).FirstOrDefaultAsync(m => m.Id == Id);

        if (Transacao is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task CapturaTransacao()
    {
        try
        {
            if (Transacao is not null && !string.IsNullOrEmpty(Transacao.PaymentId))
            {
                var capturaResultado = await CieloService.CapturePay(Transacao.PaymentId);
                Console.WriteLine($"Resultado do cancelamento: {capturaResultado}");

                Transacao.Log = capturaResultado;
                Transacao.EstadoDaTransacao = "Transação Capturada!";

                DbContext.Attach(Transacao!).State = EntityState.Modified;

                await DbContext.SaveChangesAsync();
            }
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!TransacaoExists(Transacao!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao cancelar a transação: {ex.Message}");
            mensagemErro = "A Transação não pode ser cancelada.";
        }

        NavigationManager.NavigateTo("/transacoes");
    }

    bool TransacaoExists(int id)
    {
        return DbContext.Transacoes.Any(e => e.Id == id);
    }
}
