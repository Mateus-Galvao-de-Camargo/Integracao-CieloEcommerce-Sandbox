@page "/Cartoes/edit"

@using Microsoft.EntityFrameworkCore
@using TesteDaUmbler.Models
@using TesteDaUmbler.Data
@inject AppDbContext DbContext
@inject NavigationManager NavigationManager

<PageTitle>Cartão</PageTitle>

<h1>Editar</h1>

<h4>Cartão</h4>
<hr />
@if (Cartao is null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Cartao" OnValidSubmit="UpdateCartao" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Cartao.Id" value="@Cartao.Id" />
                <div class="mb-3">
                    <label for="numerodocartao" class="form-label">Número Do Cartão:</label>
                    <InputText id="numerodocartao" @bind-Value="Cartao.NumeroDoCartao" class="form-control" maxlength="16" />
                    <ValidationMessage For="() => Cartao.NumeroDoCartao" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="cvv" class="form-label">CVV:</label>
                    <InputText id="cvv" @bind-Value="Cartao.Cvv" class="form-control" maxlength="3" />
                    <ValidationMessage For="() => Cartao.Cvv" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="validade" class="form-label">Validade (MM/AAAA):</label>
                    <div class="row">
                        <div class="col-6">
                            <InputSelect id="mes" @bind-Value="Cartao.Mes" class="form-control">
                                @for (int i = 1; i <= 12; i++)
                                {
                                    <option value="@i">@i.ToString("D2")</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="() => Cartao.Mes" class="text-danger" />
                        </div>
                        <div class="col-6">
                            <InputSelect id="ano" @bind-Value="Cartao.Ano" class="form-control">
                                @for (int i = DateTime.Now.Year; i <= DateTime.Now.Year + 20; i++)
                                {
                                    <option value="@i">@i</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="() => Cartao.Ano" class="text-danger" />
                        </div>
                    </div>
                </div>
                <div class="mb-3">
                    <label for="nomenocartao" class="form-label">Nome No Cartão:</label>
                    <InputText id="nomenocartao" @bind-Value="Cartao.NomeNoCartao" class="form-control" style="text-transform: uppercase;" />
                    <ValidationMessage For="() => Cartao.NomeNoCartao" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Salvar</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/cartoes">Voltar pra lista</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Cartao? Cartao { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Cartao ??= await DbContext.Cartoes.FirstOrDefaultAsync(m => m.Id == Id);

        if (Cartao is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateCartao()
    {
        if(Cartao != null)
        {
            Cartao.Validade = $"{Cartao.Mes.ToString("D2")}/{Cartao.Ano}";

            Cartao.NomeNoCartao = Cartao.NomeNoCartao.ToUpper();

            if (Cartao.NumeroDoCartao.StartsWith("5"))
            {
                Cartao.Bandeira = "Mastercard";
            }
            else
            {
                Cartao.Bandeira = "Visa";
            }

            DbContext.Attach(Cartao!).State = EntityState.Modified;

            try
            {
                await DbContext.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!CartaoExists(Cartao!.Id))
                {
                    NavigationManager.NavigateTo("notfound");
                }
                else
                {
                    throw;
                }
            }

            NavigationManager.NavigateTo("/cartoes");
        }
      
    }

    bool CartaoExists(int id)
    {
        return DbContext.Cartoes.Any(e => e.Id == id);
    }
}
