@page "/cartoes/create"

@using Microsoft.EntityFrameworkCore
@using TesteDaUmbler.Models
@using TesteDaUmbler.Data
@inject AppDbContext DbContext
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Adicioanr</h1>

<h4>Cartao</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Cartao" OnValidSubmit="AddCartao" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="numerodocartao" class="form-label">Número Do Cartão:</label> 
                <InputNumber id="numerodocartao" @bind-Value="Cartao.NumeroDoCartao" class="form-control" /> 
                <ValidationMessage For="() => Cartao.NumeroDoCartao" class="text-danger" /> 
            </div>
            <div class="mb-3">
                <label for="cvc" class="form-label">CVC:</label> 
                <InputNumber id="cvc" @bind-Value="Cartao.Cvc" class="form-control" /> 
                <ValidationMessage For="() => Cartao.Cvc" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="validade" class="form-label">Validade (MM/AAAA):</label>
                <div class="row">
                    <div class="col-6">
                        <InputSelect id="mes" @bind-Value="MesValidade" class="form-control">
                            @for (int i = 1; i <= 12; i++)
                            {
                                <option value="@i">@i.ToString("D2")</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => MesValidade" class="text-danger" />
                    </div>
                    <div class="col-6">
                        <InputSelect id="ano" @bind-Value="AnoValidade" class="form-control">
                            @for (int i = DateTime.Now.Year; i <= DateTime.Now.Year + 20; i++)
                            {
                                <option value="@i">@i</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => AnoValidade" class="text-danger" />
                    </div>
                </div>
            </div>
            <div class="mb-3">
                <label for="nomenocartao" class="form-label">Nome No Cartão:</label> 
                <InputText id="nomenocartao" @bind-Value="Cartao.NomeNoCartao" class="form-control" /> 
                <ValidationMessage For="() => Cartao.NomeNoCartao" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Adicionar</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/cartoes">Voltar pra lista</a>
</div>

@code {

    [SupplyParameterFromForm]
    public Cartao Cartao { get; set; } = new();

    public int MesValidade { get; set; } = DateTime.Now.Month;
    public int AnoValidade { get; set; } = DateTime.Now.Year;

    public async Task AddCartao()
    {
        // Log de depuração para verificar valores de MesValidade e AnoValidade
        Console.WriteLine($"MesValidade: {MesValidade}, AnoValidade: {AnoValidade}");

        if (MesValidade < 1 || MesValidade > 12)
        {
            throw new ArgumentOutOfRangeException(nameof(MesValidade), "O mês deve estar entre 1 e 12.");
        }

        if (AnoValidade < DateTime.Now.Year || AnoValidade > DateTime.Now.Year + 20)
        {
            throw new ArgumentOutOfRangeException(nameof(AnoValidade), "O ano deve estar dentro de um intervalo válido.");
        }
        
        // Definindo a validade com o primeiro dia do mês e ano selecionado
        Cartao.Validade = new DateTime(AnoValidade, MesValidade, 1);

        

        DbContext.Cartoes.Add(Cartao);
        await DbContext.SaveChangesAsync();
        NavigationManager.NavigateTo("/cartoes");
    }
}
