@page "/cartoes/delete"

@using Microsoft.EntityFrameworkCore
@using TesteDaUmbler.Models
@using TesteDaUmbler.Data
@inject AppDbContext DbContext
@inject NavigationManager NavigationManager


<PageTitle>Cartão</PageTitle>

<h1>Remover Cartão</h1>

<div>
    <h4>Cartão</h4>
    <hr />
    @if (cartao is null)
    {
        <p><em>Carregando...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Número Do Cartão</dt>
            <dd class="col-sm-10">@cartao.NumeroDoCartao</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CVV</dt>
            <dd class="col-sm-10">@cartao.Cvv</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Validade</dt>
            <dd class="col-sm-10">@cartao.Validade</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Nome No Cartão</dt>
            <dd class="col-sm-10">@cartao.NomeNoCartao</dd>
        </dl>
        <EditForm method="post" Model="cartao" OnValidSubmit="DeleteCartao" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(cartao is null)">Remover</button> |
            <a href="/cartoes">Voltar pra lista</a>
        </EditForm>
    }
</div>

@code {
    Cartao? cartao;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        cartao = await DbContext.Cartoes.FirstOrDefaultAsync(m => m.Id == Id);

        if (cartao is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteCartao()
    {
        DbContext.Cartoes.Remove(cartao!);
        await DbContext.SaveChangesAsync();
        NavigationManager.NavigateTo("/cartoes");
    }
}
